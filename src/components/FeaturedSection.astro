---
// FeaturesSection.astro - Clean & Responsive Version
const features = [
  {
    id: 1,
    title: 'Ticketing System',
    description:
      'Manage customer requests with ease by creating, assigning, and tracking service tickets in real-time.',
    badge: 'Real-time',
    icon: 'ticket',
    size: 'large',
  },
  {
    id: 2,
    title: 'Master Database',
    description: 'Store and access all essential information in one centralized, secure database.',
    badge: 'Secure',
    icon: 'database',
    size: 'medium',
  },
  {
    id: 3,
    title: 'Work Schedule',
    description: 'Efficiently plan and manage technician schedules to optimize field operations.',
    badge: 'AI-Optimized',
    icon: 'calendar',
    size: 'medium',
  },
  {
    id: 4,
    title: 'SLA Monitoring',
    description: 'Track Service Level Agreements to ensure timely response and resolution.',
    badge: 'Performance',
    icon: 'clock',
    size: 'small',
  },
  {
    id: 5,
    title: 'Sparepart Management',
    description: 'Keep track of inventory, manage stock levels, and ensure availability.',
    badge: 'Automated',
    icon: 'package',
    size: 'small',
  },
  {
    id: 6,
    title: 'Business Trip Module',
    description: 'Simplify planning and tracking of business trips including expenses.',
    badge: 'Expense Track',
    icon: 'map',
    size: 'large',
  },
];

const getIconSVG = (iconType) => {
  const icons = {
    ticket: `<path d="M3 3H21V17H3V3Z" stroke="currentColor" stroke-width="2"/><path d="M12 17V21" stroke="currentColor" stroke-width="2"/><path d="M9 9H15" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>`,
    database: `<path d="M4 6H20L18 20H6L4 6Z" stroke="currentColor" stroke-width="2"/><circle cx="12" cy="12" r="2" fill="currentColor"/>`,
    calendar: `<rect x="3" y="4" width="18" height="15" rx="2" stroke="currentColor" stroke-width="2"/><path d="M3 10H21" stroke="currentColor" stroke-width="2"/><path d="M8 6V2" stroke="currentColor" stroke-width="2"/><path d="M16 6V2" stroke="currentColor" stroke-width="2"/>`,
    clock: `<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/><path d="M12 6V12L16 14" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>`,
    package: `<path d="M3 7V17C3 18.1046 3.89543 19 5 19H19C20.1046 19 21 18.1046 21 17V7" stroke="currentColor" stroke-width="2"/><path d="M3 7L12 13L21 7" stroke="currentColor" stroke-width="2"/>`,
    map: `<path d="M21 10C21 17 12 23 12 23S3 17 3 10C3 5.02944 7.02944 1 12 1" stroke="currentColor" stroke-width="2"/><circle cx="12" cy="10" r="3" stroke="currentColor" stroke-width="2"/>`,
  };
  return icons[iconType] || icons.ticket;
};
---

<section class="features-section" id="features">
  <div class="container">
    <!-- Header -->
    <div class="section-header">
      <span class="section-badge">FEATURES</span>
      <h2 class="section-title">Powerful Field Service Management</h2>
      <p class="section-description">
        Complete field service solution that adapts to your workflow. Access all management tools
        seamlessly across all devices.
      </p>
    </div>

    <!-- Responsive Video Demo -->
    <div class="video-demo">
      <div class="video-container">
        <iframe
          src="https://www.youtube.com/embed/Yvhv0lMx4dk?modestbranding=1&rel=0&showinfo=0&controls=1&fs=1&cc_load_policy=0&iv_load_policy=3&autohide=1"
          title="Qifess Field Service Demo"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          allowfullscreen></iframe>
      </div>
    </div>

    <!-- Features Grid -->
    <div class="features-grid">
      {
        features.map((feature) => (
          <div class={`feature-card ${feature.size}`}>
            <div class="card-inner">
              <div class="card-header">
                <div class="feature-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <Fragment set:html={getIconSVG(feature.icon)} />
                  </svg>
                </div>
                <span class="feature-badge">{feature.badge}</span>
              </div>
              <div class="card-content">
                <h3>{feature.title}</h3>
                <p>{feature.description}</p>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .features-section {
    padding: 5rem 1rem;
    background: var(--bg-main);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  /* Header */
  .section-header {
    text-align: center;
    margin-bottom: 3rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .section-badge {
    display: inline-block;
    padding: 0.5rem 1rem;
    background: var(--primary-color);
    color: white;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    letter-spacing: 0.1em;
    margin-bottom: 1rem;
  }

  .section-title {
    font-size: clamp(2rem, 4vw, 2.5rem);
    font-weight: 700;
    color: var(--heading-color);
    margin: 0 0 1rem 0;
    line-height: 1.2;
  }

  .section-description {
    font-size: 1.1rem;
    color: var(--text-light);
    line-height: 1.6;
    margin: 0;
  }

  /* Responsive Video Demo */
  .video-demo {
    margin: 2rem 0 3rem;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }

  .video-container {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    background: #000;
    border-radius: var(--border-radius, 12px);
    overflow: hidden;
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  .video-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
  }

  /* Features Grid */
  .features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .feature-card {
    border-radius: var(--border-radius, 12px);
    transition: transform 0.3s ease;
  }

  .feature-card:hover {
    transform: translateY(-5px);
  }

  .card-inner {
    background: var(--color-card);
    padding: 2rem;
    height: 100%;
    border-radius: var(--border-radius, 12px);
    border: 1px solid rgba(255, 255, 255, 0.08);
    transition: all 0.3s ease;
  }

  .feature-card:hover .card-inner {
    background: var(--color-card);
    border: 1px solid rgba(11, 31, 208, 0.2);
    box-shadow: 0 10px 25px -5px rgba(11, 31, 208, 0.1);
  }

  /* Card Header */
  .card-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1.5rem;
  }

  .feature-icon {
    width: 48px;
    height: 48px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    transition: transform 0.3s ease;
  }

  .feature-card:hover .feature-icon {
    transform: scale(1.1);
  }

  .feature-badge {
    font-size: 0.7rem;
    font-weight: 600;
    padding: 0.4rem 0.8rem;
    background: rgba(11, 31, 208, 0.1);
    color: var(--primary-color);
    border-radius: 16px;
    border: 1px solid rgba(11, 31, 208, 0.2);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: all 0.3s ease;
  }

  .feature-card:hover .feature-badge {
    background: var(--primary-color);
    color: white;
  }

  /* Card Content */
  .card-content h3 {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--heading-color);
    margin: 0 0 0.75rem 0;
    line-height: 1.3;
    transition: color 0.3s ease;
  }

  .feature-card:hover .card-content h3 {
    color: var(--primary-color);
  }

  .card-content p {
    font-size: 0.95rem;
    color: var(--text-light);
    line-height: 1.6;
    margin: 0;
  }

  /* Size Variations */
  .feature-card.large {
    grid-column: span 1;
  }

  .feature-card.large .card-inner {
    padding: 2.5rem;
  }

  .feature-card.large .card-content h3 {
    font-size: 1.4rem;
  }

  .feature-card.large .feature-icon {
    width: 56px;
    height: 56px;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .features-section {
      padding: 3rem 1rem;
    }

    .video-demo {
      margin: 1.5rem 0 2rem;
    }

    .features-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .card-inner {
      padding: 1.5rem;
    }

    .feature-card.large .card-inner {
      padding: 1.75rem;
    }
  }

  @media (max-width: 480px) {
    .features-section {
      padding: 2rem 1rem;
    }

    .section-title {
      font-size: 1.75rem;
    }

    .card-inner {
      padding: 1.25rem;
    }

    .feature-icon {
      width: 40px;
      height: 40px;
    }

    .feature-card.large .feature-icon {
      width: 48px;
      height: 48px;
    }
  }
</style>

<script>
  // Simple fade-in animation on scroll
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.feature-card');

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
          }
        });
      },
      { threshold: 0.1 }
    );

    cards.forEach((card, index) => {
      card.style.opacity = '0';
      card.style.transform = 'translateY(20px)';
      card.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;
      observer.observe(card);
    });
  });
</script>
