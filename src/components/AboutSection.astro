---
// WhyQifessSection.astro
---

<section class="why-qifess-section">
  <div class="container">
    <!-- Why Qifess Header -->
    <div class="section-header">
      <div class="badge animate-element fade-up">✨ Revolutionary Field Service Solution</div>
      <h2 class="main-title animate-element fade-up">
        Why Choose <span class="highlight">QIFESS</span>
      </h2>

      <p class="main-description animate-element fade-up">
        Transform your field service operations with our cutting-edge platform. Experience
        unparalleled efficiency, complete control, and seamless collaboration—all designed to
        skyrocket your business success.
      </p>

      <div class="stats-row animate-element fade-in-up">
        <div class="stat-item">
          <span class="stat-number" data-target="500">0</span><span class="stat-plus">+</span>
          <span class="stat-label">Companies Trust Us</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" data-target="99.9">0</span><span class="stat-percent">%</span>
          <span class="stat-label">Uptime Guarantee</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" data-target="100">0</span><span class="stat-percent">%</span>
          <span class="stat-label">Faster Operations</span>
        </div>
      </div>
    </div>

    <img
      src="/assets/img/qifess-mock3.png"
      alt="Why Qifess"
      class="animate-element fade-in-up"
      style="max-width: 60%; height: auto; margin: 2rem auto; display: block;"
    />

    <!-- Features Grid -->
    <div class="features-grid">
      <div class="feature-card animate-element" data-tilt>
        <div class="feature-header">
          <div class="feature-icon">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </div>
          <h3 class="feature-title">Easy To Configure</h3>
        </div>
        <p class="feature-description">
          It is very easy to configure every time there is a new project and can be completed in a
          short time.
        </p>
        <div class="feature-highlight">Quick setup process with intuitive interface design</div>
      </div>

      <div class="feature-card animate-element" data-tilt>
        <div class="feature-header">
          <div class="feature-icon">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </div>
          <h3 class="feature-title">Open API</h3>
        </div>
        <p class="feature-description">
          Qifess support the software integration with external applications for data
          synchronization purposes.
        </p>
        <div class="feature-highlight">Seamless integration with third-party systems</div>
      </div>

      <div class="feature-card animate-element" data-tilt>
        <div class="feature-header">
          <div class="feature-icon">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </div>
          <h3 class="feature-title">Multiproject & Multivendor</h3>
        </div>
        <p class="feature-description">
          Qifess support multiple jobs and multiple customers with different business processes.
        </p>
        <div class="feature-highlight">Manage multiple projects simultaneously with ease</div>
      </div>

      <div class="feature-card animate-element" data-tilt>
        <div class="feature-header">
          <div class="feature-icon">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M13 10V3L4 14h7v7l9-11h-7z"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </div>
          <h3 class="feature-title">Process Flexibility</h3>
        </div>
        <p class="feature-description">
          Customizable processes to suit your project needs with flexible workflow management.
        </p>
        <div class="feature-highlight">Adapt workflows to match your business requirements</div>
      </div>

      <div class="feature-card animate-element" data-tilt>
        <div class="feature-header">
          <div class="feature-icon">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </div>
          <h3 class="feature-title">Real-time Analytics</h3>
        </div>
        <p class="feature-description">
          Monitor technician productivity and track positions in real-time from your dashboard.
        </p>
        <div class="feature-highlight">Comprehensive reporting and analytics tools</div>
      </div>

      <div class="feature-card animate-element" data-tilt>
        <div class="feature-header">
          <div class="feature-icon">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </div>
          <h3 class="feature-title">Enterprise Security</h3>
        </div>
        <p class="feature-description">
          Bank-grade security with advanced encryption and compliance standards for data protection.
        </p>
        <div class="feature-highlight">99.9% uptime guarantee with robust security measures</div>
      </div>
    </div>

    <!-- View More Button -->
    <!-- <div class="view-more-container animate-element">
      <button class="view-more-btn">
        View More
        <span class="btn-arrow">→</span>
      </button>
    </div> -->
  </div>

  <!-- Grid Background -->
  <div class="grid-overlay"></div>
</section>

<script>
  // Enhanced animations and interactions
  document.addEventListener('DOMContentLoaded', function () {
    // Intersection Observer for animations
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate');
          }
        });
      },
      { threshold: 0.1 }
    );

    // Observe all animate elements
    document.querySelectorAll('.animate-element').forEach((el) => {
      observer.observe(el);
    });

    // Counter animation function
    function animateCounter(element, target, duration = 2000) {
      const start = 0;
      const startTime = performance.now();

      function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);

        // Easing function for smooth animation
        const easeOut = 1 - Math.pow(1 - progress, 3);
        const current = start + (target - start) * easeOut;

        if (target % 1 !== 0) {
          // For decimal numbers like 99.9
          element.textContent = current.toFixed(1);
        } else {
          // For whole numbers
          element.textContent = Math.floor(current);
        }

        if (progress < 1) {
          requestAnimationFrame(updateCounter);
        } else {
          element.textContent = target % 1 !== 0 ? target.toFixed(1) : target;
        }
      }

      requestAnimationFrame(updateCounter);
    }

    // Enhanced Intersection Observer for stats
    const statsObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate');

            // Animate counters when stats section comes into view
            if (entry.target.classList.contains('stats-row')) {
              const statNumbers = entry.target.querySelectorAll('.stat-number');
              statNumbers.forEach((stat, index) => {
                const target = parseFloat(stat.getAttribute('data-target'));
                setTimeout(() => {
                  animateCounter(stat, target);
                }, index * 200); // Stagger the animations
              });
            }
          }
        });
      },
      { threshold: 0.3 }
    );

    // Observe stats section
    const statsRow = document.querySelector('.stats-row');
    if (statsRow) {
      statsObserver.observe(statsRow);
    }

    // Tilt effect for cards
    document.querySelectorAll('[data-tilt]').forEach((card) => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        const centerX = rect.width / 2;
        const centerY = rect.height / 2;

        const rotateX = (y - centerY) / 20;
        const rotateY = (centerX - x) / 20;

        card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.02, 1.02, 1.02)`;
      });

      card.addEventListener('mouseleave', () => {
        card.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)';
      });
    });

    // View More button interaction
    const viewMoreBtn = document.querySelector('.view-more-btn');
    if (viewMoreBtn) {
      viewMoreBtn.addEventListener('click', function () {
        // Add your view more functionality here
        console.log('View More clicked');
      });
    }
  });
</script>

<style>
  .why-qifess-section {
    padding: 8rem 0;
    background: var(--bg-color, #1e293b);
    position: relative;
    color: var(--text-color, #f8fafc);
    overflow: hidden;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
    position: relative;
    z-index: 2;
  }

  /* Grid Overlay */
  .grid-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: linear-gradient(rgba(59, 130, 246, 0.08) 1px, transparent 1px),
      linear-gradient(90deg, rgba(59, 130, 246, 0.08) 1px, transparent 1px);
    background-size: 40px 40px;
    animation: grid-move 30s linear infinite;
    z-index: 1;
  }

  @keyframes grid-move {
    0% {
      transform: translate(0, 0);
    }
    100% {
      transform: translate(40px, 40px);
    }
  }

  /* Section Header */
  .section-header {
    text-align: center;
    margin-bottom: 6rem;
  }

  .badge {
    display: inline-block;
    padding: 0.5rem 1.5rem;
    background: rgba(59, 130, 246, 0.1);
    border: 1px solid rgba(59, 130, 246, 0.3);
    border-radius: 50px;
    font-size: 0.875rem;
    font-weight: 500;
    color: #60a5fa;
    margin-bottom: 2rem;
  }

  .main-title {
    font-size: 3.5rem;
    font-weight: 800;
    margin-bottom: 2rem;
    letter-spacing: -0.025em;
    color: var(--text-color, #f8fafc);
  }

  .highlight {
    color: #3b82f6;
  }

  .main-description {
    max-width: 48rem;
    margin: 0 auto 3rem;
    color: var(--text-color, #cbd5e1);
    font-size: 1.25rem;
    line-height: 1.7;
    font-weight: 400;
    opacity: 0.8;
  }

  .stats-row {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-top: 3rem;
  }

  .stat-item {
    text-align: center;
  }

  .stat-number {
    display: inline-block;
    font-size: 2rem;
    font-weight: 700;
    color: #3b82f6;
    margin-bottom: 0.25rem;
    min-width: 4ch;
    text-align: left;
  }

  .stat-plus,
  .stat-percent {
    font-size: 2rem;
    font-weight: 700;
    color: #3b82f6;
  }

  .stat-label {
    display: block;
    font-size: 0.875rem;
    color: var(--text-color, #94a3b8);
    opacity: 0.7;
    margin-top: 0.25rem;
  }

  /* Features Grid */
  .features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .feature-card {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    padding: 2.5rem;
    border-radius: 16px;
    /* Permanent border - always visible */
    border: 1px solid rgba(59, 130, 246, 0.3);
    position: relative;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    opacity: 0;
    transform: translateY(30px);
    /* Add subtle glow effect */
    box-shadow: 0 4px 20px rgba(59, 130, 246, 0.1);
  }

  .feature-card.animate {
    opacity: 1;
    transform: translateY(0);
  }

  .feature-card:hover {
    transform: translateY(-8px);
    /* Intensify border on hover */
    border-color: rgba(59, 130, 246, 0.6);
    box-shadow: 0 20px 40px rgba(59, 130, 246, 0.2);
  }

  .feature-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .feature-icon {
    width: 56px;
    height: 56px;
    border-radius: 12px;
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    transition: transform 0.3s ease;
    flex-shrink: 0;
  }

  .feature-icon svg {
    width: 24px;
    height: 24px;
  }

  .feature-card:hover .feature-icon {
    transform: scale(1.1);
  }

  .feature-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--text-color, #f8fafc);
    margin: 0;
  }

  .feature-description {
    color: var(--text-color, #cbd5e1);
    font-size: 0.95rem;
    line-height: 1.6;
    margin-bottom: 1.5rem;
    opacity: 0.8;
  }

  .feature-highlight {
    background: rgba(59, 130, 246, 0.1);
    border: 1px solid rgba(59, 130, 246, 0.2);
    border-radius: 8px;
    padding: 1rem;
    font-size: 0.875rem;
    color: #60a5fa;
  }

  /* View More Button */
  .view-more-container {
    text-align: center;
    margin-top: 3rem;
  }

  .view-more-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    color: white;
    padding: 1rem 2rem;
    border-radius: 12px;
    font-weight: 600;
    font-size: 1rem;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
  }

  .view-more-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(59, 130, 246, 0.3);
  }

  .btn-arrow {
    transition: transform 0.3s ease;
  }

  .view-more-btn:hover .btn-arrow {
    transform: translateX(4px);
  }

  /* Animation Classes */
  .animate-element {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .animate-element.animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Staggered animation delays */
  .feature-card:nth-child(1) {
    transition-delay: 0.1s;
  }
  .feature-card:nth-child(2) {
    transition-delay: 0.2s;
  }
  .feature-card:nth-child(3) {
    transition-delay: 0.3s;
  }
  .feature-card:nth-child(4) {
    transition-delay: 0.4s;
  }
  .feature-card:nth-child(5) {
    transition-delay: 0.5s;
  }
  .feature-card:nth-child(6) {
    transition-delay: 0.6s;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .features-grid {
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    }
  }

  @media (max-width: 768px) {
    .why-qifess-section {
      padding: 4rem 0;
    }

    .container {
      padding: 0 1rem;
    }

    .main-title {
      font-size: 2.5rem;
    }

    .main-description {
      font-size: 1.1rem;
      padding: 0 1rem;
    }

    .stats-row {
      flex-direction: column;
      gap: 1.5rem;
    }

    .features-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .feature-card {
      padding: 2rem;
    }

    .feature-header {
      gap: 0.75rem;
    }

    .feature-icon {
      width: 48px;
      height: 48px;
    }

    .feature-icon svg {
      width: 20px;
      height: 20px;
    }

    .view-more-btn {
      padding: 0.875rem 1.5rem;
      font-size: 0.875rem;
    }
  }

  @media (max-width: 480px) {
    .section-header {
      margin-bottom: 4rem;
    }

    .main-title {
      font-size: 2rem;
    }

    .main-description {
      font-size: 1rem;
    }

    .feature-card {
      padding: 1.5rem;
    }

    .stats-row {
      gap: 1rem;
    }

    .stat-number {
      font-size: 1.5rem;
    }
  }
</style>

<script>
  // Enhanced animations and interactions - Astro View Transitions Compatible
  function initWhyQifessSection() {
    // Counter animation function
    function animateCounter(element, target, duration = 2000) {
      const start = 0;
      const startTime = performance.now();

      function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);

        // Easing function for smooth animation
        const easeOut = 1 - Math.pow(1 - progress, 3);
        const current = start + (target - start) * easeOut;

        if (target % 1 !== 0) {
          // For decimal numbers like 99.9
          element.textContent = current.toFixed(1);
        } else {
          // For whole numbers
          element.textContent = Math.floor(current);
        }

        if (progress < 1) {
          requestAnimationFrame(updateCounter);
        } else {
          element.textContent = target % 1 !== 0 ? target.toFixed(1) : target;
        }
      }

      requestAnimationFrame(updateCounter);
    }

    // Enhanced Intersection Observer for animations
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate');
          }
        });
      },
      {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px',
      }
    );

    // Enhanced Intersection Observer for stats
    const statsObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate');

            // Animate counters when stats section comes into view
            if (entry.target.classList.contains('stats-row')) {
              const statNumbers = entry.target.querySelectorAll('.stat-number');
              statNumbers.forEach((stat, index) => {
                const target = parseFloat(stat.getAttribute('data-target'));
                setTimeout(() => {
                  animateCounter(stat, target);
                }, index * 200); // Stagger the animations
              });
            }
          }
        });
      },
      {
        threshold: 0.3,
        rootMargin: '0px 0px -20px 0px',
      }
    );

    // Observe all animate elements
    document.querySelectorAll('.animate-element').forEach((el) => {
      observer.observe(el);
    });

    // Observe stats section
    const statsRow = document.querySelector('.stats-row');
    if (statsRow) {
      statsObserver.observe(statsRow);
    }

    // Enhanced tilt effect for cards
    document.querySelectorAll('[data-tilt]').forEach((card) => {
      // Mouse move tilt effect
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        const centerX = rect.width / 2;
        const centerY = rect.height / 2;

        const rotateX = (y - centerY) / 20;
        const rotateY = (centerX - x) / 20;

        card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.02, 1.02, 1.02)`;
      });

      // Mouse leave reset
      card.addEventListener('mouseleave', () => {
        card.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)';
      });
    });

    // View More button interaction
    const viewMoreBtn = document.querySelector('.view-more-btn');
    if (viewMoreBtn) {
      viewMoreBtn.addEventListener('click', function () {
        // Add your view more functionality here
        console.log('View More clicked');

        // Example: Smooth scroll to next section or show more content
        // You can customize this based on your needs
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
          this.style.transform = '';
        }, 150);
      });
    }
  }

  // Initialize on DOM load and after view transitions
  function initializeOnLoad() {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initWhyQifessSection);
    } else {
      initWhyQifessSection();
    }
  }

  // Handle Astro View Transitions
  document.addEventListener('astro:page-load', initWhyQifessSection);

  // Fallback for non-Astro environments
  initializeOnLoad();

  // Cleanup function for view transitions
  document.addEventListener('astro:before-preparation', () => {
    // Clean up any running animations or observers if needed
    const runningAnimations = document.querySelectorAll('.animate-element');
    runningAnimations.forEach((el) => {
      el.style.transition = 'none';
    });
  });

  // Re-enable transitions after navigation
  document.addEventListener('astro:after-swap', () => {
    // Re-enable transitions
    setTimeout(() => {
      const elements = document.querySelectorAll('.animate-element');
      elements.forEach((el) => {
        el.style.transition = '';
      });
    }, 100);
  });
</script>
